/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        lh: layer_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_HOLD";
            bindings = <&kp>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        sh: shift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPSLOCK>;

            tapping-term-ms = <200>;
        };

        Apo_Q: Apo_Q {
            compatible = "zmk,behavior-mod-morph";
            label = "APO_Q";
            bindings = <&kp APOSTROPHE>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        open_bracket: open_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "OPEN_BRACKET";
            bindings = <&kp RA(N5)>, <&kp RA(N8)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        close_bracket: close_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "CLOSE_BRACKET";
            bindings = <&kp RA(NUMBER_6)>, <&kp RA(N9)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        my_layer_tap: my_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MY_LAYER_TAP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
        };

        win_mac_copy: wmc {
            compatible = "zmk,behavior-tap-dance";
            label = "WMC";
            #binding-cells = <0>;
            bindings = <&mt LEFT_COMMAND LG(C)>, <&kp LC(C)>;
        };

        win_mac_paste: wmp {
            compatible = "zmk,behavior-tap-dance";
            label = "WMP";
            #binding-cells = <0>;
            bindings = <&mt RIGHT_COMMAND LG(V)>, <&kp LC(V)>;
        };
    };

    combos { compatible = "zmk,combos"; };

    macros {
        less_than: less_than {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(DOT) &kp L &kp T>;
            label = "LESS_THAN";
        };

        greater_than: greater_than {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(DOT) &kp G &kp T>;
            label = "GREATER_THAN";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            label = "Base";
            bindings = <
&kp C_SLEEP              &kp N1  &kp N2  &kp N3     &kp N4                  &kp N5                                                               &kp N6         &kp N7                   &kp N8             &kp N9   &kp N0    &kp MINUS
&kp TAB                  &kp Q   &kp W   &kp E      &kp R                   &kp T                                                                &kp Y          &kp U                    &kp I              &kp O    &kp P     &kp LEFT_BRACKET
&mt LEFT_CONTROL ESCAPE  &kp A   &kp S   &kp D      &kp F                   &kp G                                                                &kp H          &kp J                    &kp K              &kp L    &kp SEMI  &kp SQT
&sh                      &kp Z   &kp X   &kp C      &kp V                   &kp B                &kp LS(N8)               &kp LS(N9)             &kp N          &kp M                    &kp COMMA          &kp DOT  &kp FSLH  &kp RSHFT
                                         &kp LA(X)  &mt LEFT_ALT LS(LC(C))  &mt LEFT_GUI DELETE  &my_layer_tap 1 SPACE    &my_layer_tap 2 ENTER  &kp BACKSPACE  &mt RIGHT_ALT LC(LS(V))  &kp RIGHT_CONTROL
            >;
        };

        num {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            label = "Num";
            bindings = <
&ext_power EP_TOG  &sys_reset  &bootloader  &kp C_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP                    &none   &none         &none         &kp LS(NUMBER_0)  &kp LS(NUMBER_3)  &kp LS(LG(NUMBER_4))
&trans             &trans      &none        &kp C_PREV  &kp C_PLAY_PAUSE   &kp C_NEXT                         &none   &kp N7        &kp N8        &kp N9            &kp KP_DIVIDE     &sys_reset
&none              &none       &none        &none       &none              &none                              &none   &kp NUMBER_4  &kp N5        &kp NUMBER_6      &kp LS(N1)        &to 0
&none              &none       &none        &none       &none              &none            &trans    &trans  &none   &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3      &trans            &lh RIGHT_SHIFT 1
                                            &trans      &trans             &trans           &trans    &trans  &kp N0  &kp DOT       &kp COMMA
            >;
        };

        nav {
            bindings = <
&kp F1  &kp F2  &kp F3            &kp F4                &kp F5             &kp F6                    &kp F7  &kp F8            &kp F9          &kp F10            &kp F11  &kp F12
&none   &none   &kp LS(LA(LEFT))  &kp UP_ARROW          &kp LS(LA(RIGHT))  &none                     &none   &kp LS(LA(TAB))   &kp UP_ARROW    &kp LA(TAB)        &none    &none
&none   &none   &kp LEFT_ARROW    &kp DOWN_ARROW        &kp RIGHT          &none                     &none   &kp LEFT_ARROW    &kp DOWN_ARROW  &kp RIGHT_ARROW    &none    &to 0
&none   &none   &kp LA(LC(LEFT))  &kp LA(LC(UP_ARROW))  &kp LA(LC(RIGHT))  &none   &none     &none   &none   &kp LA(LG(LEFT))  &none           &kp LA(LG(RIGHT))  &none    &lh RIGHT_SHIFT 2
                                  &trans                &trans             &trans  &trans    &trans  &trans  &trans            &trans
            >;

            label = "Nav";
        };

        Symbols {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            label = "Sym";
            bindings = <
&bt BT_CLR  &bt BT_SEL 0           &bt BT_SEL 1      &bt BT_SEL 2      &bt BT_SEL 3   &bt BT_SEL 4                                       &none             &none             &none             &none           &none          &trans
&trans      &kp RA(N5)             &kp RA(NUMBER_6)  &kp RA(N8)        &kp RA(N9)     &kp RA(RS(Y))                                      &kp RS(RA(X))     &kp LS(N7)        &kp RA(N7)        &kp RA(LS(N7))  &none          &none
&trans      &kp LS(RIGHT_BRACKET)  &kp LS(N5)        &kp RA(NUMBER_3)  &kp RA(EQUAL)  &kp RA(Q)                                          &kp LS(NUMBER_6)  &kp LS(NUMBER_1)  &kp LS(NUMBER_3)  &kp SLASH       &kp BACKSLASH  &to 0
&trans      &kp LS(MINUS)          &none             &none             &kp MINUS      &kp LS(NUMBER_2)  &open_bracket    &close_bracket  &kp LS(N8)        &kp LS(N9)        &kp CARET         &kp RA(N8)      &kp RA(N9)     &lh RIGHT_SHIFT 3
                                                     &trans            &trans         &trans            &trans           &trans          &trans            &trans            &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        sym {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
